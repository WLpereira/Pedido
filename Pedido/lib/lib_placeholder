import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import '../features/orders/orders_service.dart';

class ScanScreen extends StatefulWidget {
  const ScanScreen({super.key});

  @override
  State<ScanScreen> createState() => _ScanScreenState();
}

class _ScanScreenState extends State<ScanScreen> {
  final _controller = MobileScannerController();
  final OrdersService _service = OrdersService();
  bool _handling = false;

  Future<void> _onDetect(BarcodeCapture capture) async {
    if (_handling) return;
    final code = capture.barcodes.first.rawValue;
    if (code == null) return;
    _handling = true;
    try {
      final uri = Uri.tryParse(code);
      final token = uri?.queryParameters['t'] ?? code; // suporta token puro
      if (token.isEmpty) return;

      final orderId = await _service.placeOrder(
        token: token,
        customerName: null,
        items: const [], // cliente poder치 montar itens numa pr칩xima tela
      );
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Pedido criado: $orderId')));
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Erro: $e')));
    } finally {
      _handling = false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Escanear QR')),
      body: MobileScanner(
        controller: _controller,
        onDetect: _onDetect,
      ),
    );
  }
}

import 'package:flutter/material.dart';
import '../features/orders/orders_service.dart';

class PainelScreen extends StatefulWidget {
  const PainelScreen({super.key});

  @override
  State<PainelScreen> createState() => _PainelScreenState();
}

class _PainelScreenState extends State<PainelScreen> {
  final OrdersService _service = OrdersService();

  Future<List<Map<String, dynamic>>> _load() => _service.getActiveOrders();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Painel')), 
      body: FutureBuilder<List<Map<String, dynamic>>>(
        future: _load(),
        builder: (context, snap) {
          if (snap.connectionState != ConnectionState.done) {
            return const Center(child: CircularProgressIndicator());
          }
          final data = snap.data ?? [];
          if (data.isEmpty) {
            return const Center(child: Text('Sem pedidos ativos'));
          }
          return ListView.separated(
            padding: const EdgeInsets.all(12),
            itemBuilder: (c, i) {
              final o = data[i];
              final items = (o['items'] as List?) ?? [];
              return Card(
                child: Padding(
                  padding: const EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text('${o['table_label']}', style: Theme.of(context).textTheme.titleMedium),
                          Chip(label: Text('${o['status']}')),
                        ],
                      ),
                      const SizedBox(height: 8),
                      for (final it in items)
                        Row(
                          children: [
                            Text('x${it['quantity']}'),
                            const SizedBox(width: 8),
                            Expanded(child: Text(it['menu_item_name'] ?? it['custom_text'] ?? 'Item')),
                          ],
                        ),
                      const SizedBox(height: 12),
                      Row(
                        children: [
                          FilledButton(
                            onPressed: () async {
                              await _service.updateOrderStatus(orderId: o['order_id'], status: 'served');
                              if (!mounted) return; setState(() {});
                            },
                            child: const Text('Marcar atendido'),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              );
            },
            separatorBuilder: (c, _) => const SizedBox(height: 8),
            itemCount: data.length,
          );
        },
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../features/auth/auth_service.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _userCtrl = TextEditingController();
  final _passCtrl = TextEditingController();
  bool _loading = false;

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => _loading = true);
    try {
      final res = await AuthService().login(
        username: _userCtrl.text.trim(),
        password: _passCtrl.text,
      );
      if (res['success'] == true) {
        if (!mounted) return;
        context.go('/painel');
      } else {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(res['message']?.toString() ?? 'Falha no login')),
        );
      }
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erro: $e')),
      );
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 420),
          child: Card(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const SizedBox(height: 8),
                    Text('Entrar no painel', style: Theme.of(context).textTheme.titleLarge),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _userCtrl,
                      decoration: const InputDecoration(labelText: 'Usu치rio'),
                      validator: (v) => (v == null || v.isEmpty) ? 'Informe o usu치rio' : null,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _passCtrl,
                      decoration: const InputDecoration(labelText: 'Senha'),
                      obscureText: true,
                      validator: (v) => (v == null || v.isEmpty) ? 'Informe a senha' : null,
                    ),
                    const SizedBox(height: 20),
                    FilledButton(
                      onPressed: _loading ? null : _submit,
                      child: _loading
                          ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(strokeWidth: 2))
                          : const Text('Entrar'),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../screens/login_screen.dart';
import '../screens/painel_screen.dart';
import '../screens/scan_screen.dart';

class AppRouter {
  AppRouter._();

  static final GoRouter router = GoRouter(
    initialLocation: '/login',
    routes: <RouteBase>[
      GoRoute(path: '/login', builder: (context, state) => const LoginScreen()),
      GoRoute(path: '/painel', builder: (context, state) => const PainelScreen()),
      GoRoute(path: '/scan', builder: (context, state) => const ScanScreen()),
    ],
  );
}

import 'package:supabase_flutter/supabase_flutter.dart';
import '../../core/supabase_client.dart';

class OrdersService {
  final SupabaseClient _client = AppSupabase.client;

  Future<String> placeOrder({required String token, String? customerName, required List<Map<String, dynamic>> items}) async {
    final res = await _client.rpc('place_order', params: {
      'p_token': token,
      'p_customer_name': customerName ?? '',
      'p_items': items,
    });
    return res as String;
  }

  Future<List<Map<String, dynamic>>> getActiveOrders() async {
    final res = await _client.rpc('get_active_orders');
    return (res as List).cast<Map<String, dynamic>>();
  }

  Future<void> updateOrderStatus({required String orderId, required String status}) async {
    await _client.rpc('update_order_status', params: {
      'p_order_id': orderId,
      'p_status': status,
    });
  }
}

import 'package:supabase_flutter/supabase_flutter.dart';
import '../../core/supabase_client.dart';

class AuthService {
  final SupabaseClient _client = AppSupabase.client;

  Future<Map<String, dynamic>> login({required String username, required String password}) async {
    final res = await _client.rpc('login_usuario', params: {
      'p_username': username,
      'p_password': password,
    });
    return (res as Map).cast<String, dynamic>();
  }

  Future<void> logout() async {
    await _client.rpc('logout_usuario');
  }
}

import 'package:flutter/material.dart';

class AppTheme {
  AppTheme._();

  static ThemeData light() {
    const seed = Color(0xFF0DB760); // verde moderno
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(seedColor: seed, brightness: Brightness.light),
      scaffoldBackgroundColor: const Color(0xFFF7F7F9),
      appBarTheme: const AppBarTheme(centerTitle: true, elevation: 0),
      inputDecorationTheme: const InputDecorationTheme(
        border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(12))),
        filled: true,
        fillColor: Colors.white,
      ),
      cardTheme: CardTheme(
        elevation: 0,
        color: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      ),
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12))),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        ),
      ),
    );
  }
}

import 'package:supabase_flutter/supabase_flutter.dart';
import 'app_env.dart';

class AppSupabase {
  AppSupabase._();

  static Future<void> initialize() async {
    await Supabase.initialize(
      url: AppEnv.supabaseUrl,
      anonKey: AppEnv.supabaseAnonKey,
    );
  }

  static SupabaseClient get client => Supabase.instance.client;
}

class AppEnv {
  AppEnv._();

  // URL e chave p칰blica do Supabase
  static const String supabaseUrl = 'https://degsxoyvgofwbbckvbll.supabase.co';
  static const String supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRlZ3N4b3l2Z29md2JiY2t2YmxsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2OTUzMzAsImV4cCI6MjA3NjI3MTMzMH0.uPaZyoWGKfYVDdJmgmQV2Rj0OtDGSoAQvrpo2Eu0J_U';
}


